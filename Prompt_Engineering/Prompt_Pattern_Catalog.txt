

System Prompt
    Structural Design - High-Level Patterns (Overall Design Framework):
        Natural Language Prompt (NLP)
        Key Value Prompt (KVP)
        Behavior Driven Prompt (BDP)
        Acceptance Criteria Driven Pattern (ACDP)
        Integrated Prompt Pattern (IPP)
  
            Content Design -Lower-Level Prompt Patterns (Specific Content and Details):
                    Output Control
                        Output Customization, Output Automated, Persona, Visualization Generator, Recipe, Template, Response Format Filter
                    Interaction Control
                        Flipped Interaction, Game Play, Infinite Generation
                    Error Identification
                        Fact Check List, Reflection
                    Prompt Improvement
                        Question Refinement, Alternative Approaches, Cognitive Verifier, Refusal Breaker
                    Context Control
                        Context Manager - The problem

User Prompt
    Structural Design - High-Level Patterns (Same as System Prompt, if applicable):
        Natural Language Prompt (NLP)
        Key Value Prompt (KVP)
        Behavior Driven Prompt (BDP)
        Acceptance Criteria Driven Pattern (ACDP)
        Integrated Prompt Pattern (IPP)

                Content Design - Lower-Level Prompt Patterns (Specific Content and Details):
                    Output Control
                        Output Customization, Output Automated, Persona, Visualization Generator, Recipe, Template, Response Format Filter
                    Interaction Control
                        Flipped Interaction, Game Play, Infinite Generation
                    Error Identification
                        Fact Check List, Reflection
                    Prompt Improvement
                        Question Refinement, Alternative Approaches, Cognitive Verifier, Refusal Breaker
                    Context Control
                        Context Manager - The problem

Keywords and Values in Prompt Design

Keywords
    Definition: Keywords act as labels or identifiers that help structure the prompt and provide context to the interaction.
    Role: They guide the design by categorizing and organizing information.
    Common Keywords:
    Principal: Key principles or guidelines
    Step: Sequential guidance or process flow
    Condition: Conditional logic or rules
    Requirement: Specific user or system requirements
    Context: Background or situational information
    Code: Specific code or technical details
    Task: Current, main, or sub-tasks within a process
    Category: Grouping or classification labels
    Custom Keywords: Any specific label or identifier that fits the context or needs of the prompt
    Flexibility: Keywords can be customized and adapted to fit various scenarios and use cases.

Values
    Definition: Values are the specific details, instructions, or content associated with each keyword.
    Role: They provide the substance or information related to each keyword, guiding the user's actions or understanding.
    Types of Values:
    Descriptions: Detailed explanations or descriptions related to a keyword
    Instructions: Specific guidance or commands associated with a keyword
    Criteria: Metrics, standards, or conditions related to a keyword
    Examples: Concrete examples or use cases related to a keyword
    Custom Values: Any specific detail or content that fits the context or needs of the keyword
    Relationship with Keywords: Values are intrinsically linked to keywords, providing the necessary context, details, and guidance related to each keyword.
    Usage in Prompt Design
    Combining Keywords and Values: Keywords and values are used together to create clear and effective prompts. For example:
    Keyword: "Principal"; Value: "Conciseness is the key."
    Keyword: "Step"; Value: "Analyze the input text and identify user intent."
    Customization: Both keywords and values can be customized to fit the specific context, goals, and requirements of the prompt.




Pattern Category | Prompt Pattern
=========================================
System Prompt    | Natural Language Prompt
Pattern          | Key Value Prompt
Pattern          | Behavior Driven Prompt
                 | Acceptance Criteria Driven Pattern
                 | Integrated Prompt Pattern
                 |

-----------------------------------------
                 | Behavior Driven Prompt
                 | Key Value Prompt
User Prompt      | Natural Language Prompt
Pattern          | Acceptance Criteria Driven Pattern
                 | Integrated Prompt Pattern

-----------------------------------------

Input Semantics  | Meta Language Creation
                 | would work well if the llm was trained on the Meta Language

-----------------------------------------

Output Manager   | Output Automated
(Customization)  | Persona
                 | 
                 | Visualization Generator
                 | Recipe
                 | Template
                 | Response Format Filter

-----------------------------------------

Interaction      | Flipped Interaction
                 | Game Play
                 | Infinite Generation
                 |              

-----------------------------------------

Error            |   
Identification   | Fact Check List
                 | Reflection

-----------------------------------------

Prompt           | Question Refinement
Improvement      | Alternative Approaches
                 | Cognitive Verifier
                 | Refusal Breaker

-----------------------------------------

Context Control  | Context Manager 

-----------------------------------------
Display Manager  | Display Manager
                 | 


=========================================
Restructured Prompt pattern framework



System Prompt 


Main Task Manager 

    Manage Problem 

        Identifying the problem
        Help user identify the problem - ask questions
            Recipe Pattern
        Help user take Alternative Approach  
        Cognitive Verifier
        Refusal Breaker

    Manage Persona

        Roles
        Flipped Interaction 
        The Challenger
        Critic
        Tone 

    Manage Solution

        A
        Solution Template
        Game Play 
        Alternative Approach
        Infinite Generation


    Manage Quality

        Solution Verifier
        Error Handling
        Fact Check List
        Reflection 
        Value Analyzer
            Long term
            Short term
        Impact Analyzer 
            Long term
            Short term

    Manage Display or Display style or Display Specs

        Display language format
        Display language style
        Set display language format
        Determine display language style


========================================= 


Higher Prompt Framework or Prompt Frame or prompt foundation or first layer of prompt
First tasks of creating a prompt is to select prompt foundation.
You may select one or more Prompt blocks for laying the foundations to create a prompt.

So to make your first decision to write a prompt is to select the 
foundational building blocks of the prompt.
How are you going to structure the prompt?

What technique are you going to use to structure the prompt?
Here we are declaring how are we going to prompt. 
we are declaring prompt style. 
we are deciding how we'll structure the prompt 

How do we create this prompt? How we strucutre the content of the prompt?

So how we structure the content of the prompt is the first decision we make
when we create a prompt.

so we'll use a foundational block to structure the content of the prompt.


Automated Output | 
System Prompt    | Natural Language Prompt
Pattern          | Key Value Prompt
Pattern          | Behavior Driven Prompt
                 | Acceptance Criteria Driven Pattern
                 | Integrated Prompt Pattern 
                 | X Template Pattern
                 | Few Shot Example Prompt Pattern



Lower level prompting is focused on the content of the prompt
The content of the prompt is the information that is provided to the llm.
Here the idea is what to provide to the llm to get the desired output.
Here the structural design will guide us to how to form the content of the prompt.






Main Task Manager

    Define Problem
        Identify the problem
        Assist user in identifying the problem
        Guide user through alternative approaches
        Verify understanding (Cognitive Verifier)
        Overcome refusals (Refusal Breaker)
        Create Persona

    Define roles
        Engage in flipped interaction
        Challenge assumptions (The Challenger)
        Critique solutions (Critic)
        Set tone

    Develop Solution
        Engage in game play
        Explore alternative approaches

    Ensure Quality
        Compile a fact-check list
        Reflect on solutions

    Configure Display
        Set display language format
        Determine display language style





Intent and context describe the problem to the llm 

X = a word, noun, verb or adjective or a combination of them or a sentence

A. There seems to be a need for development of a new form of language to get the desired output from the llm. MetaLanguage for llm Prompting.
    1. Vanderbilt research suggests to call it fundamental contextual statements 
        An open research question, therefore, is what approach is
        more effective than formal grammars for describing prompt
        pattern structure and ideas. We propose the concept of fundamental contextual statements, which are written descriptions
        of the important ideas to communicate in a prompt to an LLM.

    2. FCS is to be more intuitive than formal grammar
    3. FCS is to be more flexible than formal grammar
    4. Ideas can be described using alternate symbols and wording after introducing them to the llms using MetaLanguage pattern


B. Input Semantics
    1. It deals with how well does the llm understand the input
    2. This pattern is useful if the default input language is not understood by the llm
    3. Includes creation of meta language for the llm

    4. MetaLanguage Creation Pattern
        a. Intent and Context - This involves for llm to Analyze and 
            understand user intent (verb) or what the user wants to do (verb), 
            then understand the context of the input. 


            -- During the conversation user would create a prompt via alternate language
            -- User would use few shot learning to teach the llm the alternate language
            -- The intent of this pattern to explain the Semantics of the alternate language to the llm
            -- So the user can write future prompts in the alternate language

        b. motivation
            -- The llm is not able to understand the default language

        c. structure and key ideas
            -- when I say x I mean y. 
            -- when I say x I want you to do y
            -- The key structure of this pattern involves explaining the
                meaning of one or more symbols, words, or statements to
                the LLM so it uses the provided semantics for the ensuing
                conversation.

        d. example implementation
            -- When I say User login --> lands on the dashboard
            -- --> means next step in user flow or user journey

            -- When I say I want to I want to go out tonight, I want you to use the search tool to find me a place to go out tonight

        e. Consequences
            -- It's a powerful technique that can yield a great deal of control over the llm but one has to be careful to not cause confusion
            -- In general llms perform better on data they are trained on. 
            -- Limiting to use a single MetaLanguage for each conversation session is a good idea

        
C. Output Customization
    1. category focuses on constraining or tailoring the types, formats, structure, or other properties
        of the output generated by the LLM.

    2. Output Automater Pattern
        a. Intent and Context
            -- The intent of this pattern is to have
                the LLM generate a script or other automation artifact that can
                automatically perform any steps it recommends taking as part
                of its output.
            -- The goal is to reduce the manual effort needed
                to implement any LLM output recommendations.

        b. motivation
            -- When the output of the llm is a set of steps to be performed by the user, 
                then the user can automate the steps using the output automater pattern
        
        c. strucure and key ideas
            -- Contextual statement
                -- When you produce an output that has at least one step abd the following
                    properties (alternatively always do this)
                        -- This instruction is Identify when automated script is needed
                        -- The scope can be limited to a single step or a set of steps
                -- Create an executable script for x to perform the steps
                    -- This should be concret statement about the type of output to be generated

        d. example implementation
                -- Document editing example
                    -- "From now on, whenever you generate instructions that involve more than three editing steps in a document, 
                        generate a step-by-step guide that can be followed to automatically make the specified edits or changes to the existing document."
                        For example, if the task involves changing the font, adjusting the margins, and adding a header, the LLM would generate a guide like this:
                        Open the document in your word processor.
                        Select all text (Ctrl+A or Command+A).
                        Change the font to Times New Roman, size 12.
                        Go to the 'Page Layout' or 'Format' menu and adjust the margins to 1 inch on all sides.
                        Go to the 'Insert' menu, select 'Header', and type "My Document" in the header space.    
        
        e. Consequences
            -- LLM would need access to tools to automate the output
            -- Lesser option would be to trick the llm into generating code for automating the output
            -- Needs full context to produce automation artifacts

    3. Persona Pattern
        a. Intent and Context
            -- The intent of this patter is to give llm a persona to help it generate output
        
        b. motivation
            -- The user may not know the tasks that need to be performed but they might know the
                persona of the person who can perform the task. like a doctor, lawyer etc.

        c. strucure and key ideas
            -- As a persona X, 
            -- provide output that persona X would provide


        d. example implementation
            -- As a doctor, provide output that a doctor would provide
            -- Persona Pattern is a good pattern to combine with game play pattern

        e. Consequences
            -- it may lead to llm making interesting assumptions and "hellucinations"
                regarding the context of the persona

            

    4. Visualization Generator Pattern
        a. Intent and Context
            -- The intent of this pattern is to have the llm generate a visualization via text.
            -- This pattern allows the creation of visualization by creating input for visualization tools
                like Dall-E, Graphviz Dot 

        b. motivation
            -- To give llms the ability to generate visualizations
        
        c. strucure and key ideas
            -- Generate an X that I can provide to tool Y to visualize it
            -- llm is expected to generate description of the image that the Y tool can consume

        d. example implementation
            -- “Whenever I ask you to visualize something, please
                create either a Graphviz Dot file or DALL-E prompt
                that I can use to create the visualization. Choose
                the appropriate tools based on what needs to be
                visualized.”
        
        e. Consequences
            --  The pattern creates a target pipeline
                for the output to render a visualization. The pipeline may
                include AI generators, such as DALL-E, that can produce
                rich visualizations. The pattern allows the user to expand the
                expressive capabilities of the output into the visual domain.

    5. Recipe Pattern
        a. Intent and Context
            -- This pattern provides constraints to
                ultimately output a sequence of steps given some partially
                provided “ingredients” that must be configured in a sequence
                of steps to achieve a stated goal. It combines the Template,
                Alternative Approaches, and Reflection patterns.
        
        b. motivation
            --  Typically, users generally know—or have an idea
                of—what the end goal should look like and what “ingredients”
                belong in the prompt. However, they may not necessarily know
                the precise ordering of steps to achieve that end goal.

        c. structure and key ideas
            -- Contextual Statements
                -- I would like to achieve X (state the goal)
                -- I know that I need to perform steps A,B,C (stating partial known steps)
                -- Provide a complete sequence of steps for me (asking for complete steps)
                -- Fill in any missing steps (asking for missing steps)
                -- Identify any unnecessary steps (asking for identify unnecessary steps)

        d. example implementation
            -- “I am trying to deploy an application to the cloud. I
                know that I need to install the necessary dependencies on a virtual machine for
                my application. I know
                that I need to sign up for an AWS account. Please
                provide a complete sequence of steps. Please fill in
                any missing steps. Please identify any unnecessary
                steps.”

        e. Consequences
            -- User may not have a good description of the goal, build or design
            -- This pattern may use unwanted bias


    6. Template Pattern
        a. Intent and Context
            -- The intent of the pattern is to
                ensure an LLM’s output follows a precise template in terms of
                structure.
        
        b. motivation
            -- To generate a use-case specific template
            
        c. strucure and key ideas
            -- Contextual Statements
                -- I am going to provide a template for your output
                -- X is my placeholder for content
                -- Try to fit the output into one or more of the placeholders that I list
                -- Please preserve the formatting and overall template that
                -- I provide
                -- This is the template: PATTERN with PLACEHOLDERS

        d. example implementation
            -- “I am going to provide a template for your output. Everything in all caps is a placeholder. Any
                time that you generate text, try to fit it into one
                of the placeholders that I list. Please preserve the
                formatting and overall template that I provide at
                https://myapi.com/NAME/profile/JOB”

            -- User: “Generate a name and job title for a person”
            -- ChatGPT: “https://myapi.com/Emily Parker/profile/
                Software Engineer”

        e. Consequences
            -- It can limit the quality of output by limiting the output to the template
            -- Filtering can be hard to combine with out ouput category patterns
            -- It wont display alternative approaches

    7. Response Format Filter Pattern
        a. Intent and Context
            -- The intent of this pattern is to have the LLM generate
                output in a specific format or structure.
        
        b. motivation
            -- The user may want the llm to generate output in a specific format or structure

        c. structure and key ideas
            -- Contextual Statements
                -- I would like you to generate output in format X
                -- I would like you to generate output in structure X
                -- I would like you to generate output in format X and structure Y

   8. Few-Shot Example Prompt Pattern
        a. User Intent and Description or Full Context of the Problem (Intent and Context)
            -- Goal: To guide the language model's understanding and response using a limited number of examples or instructions.
            -- Context: Enhancing the model's ability to generalize from few examples and adapt to specific tasks without extensive training data.
            -- Application: Useful in scenarios where specific behavior, response style, or adaptation to a unique problem is required.
        
        b. Few-Shot Example Pattern Value (Motivation)
            -- Flexibility: Adapts to various tasks, problems, and scenarios without the need for extensive training.
            -- Ease of Use: Allows users to guide the model effectively with minimal examples.
            -- Precision: Enables more controlled and targeted responses by providing examples that match the desired output.
        
        c. Structure and Key Ideas of the Pattern (Fundamental Contextual Statements)
            -- Examples: Carefully chosen examples that represent the desired behavior or output.
            -- Instructions: Clear and concise instructions that guide the model in interpreting and applying the examples.
            -- Alignment: Ensuring that the examples and instructions align with the specific task or problem at hand.
       
        d. Example Implementation
            -- Scenario: Guiding the model to write in a specific literary style
            -- Example 1: "Write a sentence in the style of Ernest Hemingway."
            -- Example 2: "Describe a landscape using concise and direct language."
            -- Instruction: "Please write a short paragraph about a bustling city in the style demonstrated in the examples."
        
        e. Consequences
            Benefits
                -- Provides a quick and efficient way to guide the model towards desired behavior.
                -- Enhances customization and adaptability to unique problems or styles.
                -- Reduces the need for extensive training or fine-tuning.
            Risks
                -- The effectiveness may vary depending on the quality and relevance of the examples.
                -- Requires careful selection and alignment of examples to avoid confusion or undesired outputs.

    

D. Interaction
    -- Focus here is on Interaction between the user and the llm

    1. Flipped Interaction Pattern
        a. Intent and Context
            -- Asking the llm to act as the user to identify the user's needs
            -- Asking the llm to drive the interaction
        
        b. motivation
            --  Rather than having the user drives a conversation, an LLM often has knowledge it can use to more
                accurately obtain information from the user. The goal of the
                Flipped Interaction pattern is to flip the interaction flow so the
                LLM asks the user questions to achieve some desired goal. The
                LLM can often better select the format, number, and content
                of the interactions to ensure that the goal is reached faster,
                more accurately, and/or by using knowledge the user may not
                (initially) possess.

        c. structure and key ideas
            -- Contextual Statements
                -- I would like you to ask me questions to achieve X
                    You should ask questions until this condition is met or
                    to achieve this goal (alternatively, forever)
                    (Optional) ask me the questions one at a time, two at
                    a time, etc.

        d. example implementation
                -- “From now on, I would like you to ask me questions
                    to deploy a Python application to AWS. When you
                    have enough information to deploy the application,
                    create a Python script to automate the deployment.”
            
        e. Consequences
            -- keeping the questioning session open ended can improve the quality of output
            -- it can also lead to the llm unnecessary questioning
            -- if a requirement is known in advance than it's better to provide it to the llm

        
    2. Game Play Pattern
            a. Intent and Context
                -- The intent of this pattern is to have the LLM
                    generate a game that the user can play to achieve some goal.
                    
            b. motivation
                -- You would like the LLM to generate scenarios or questions revolving around a specific topic and require
                    users to apply problem solving or other skills to accomplish
                    a task related to the scenario.

            c. strucure and key ideas
                -- Contextual Statements
                -- Create a game for me around X
                -- One or more fundamental rules of the game

            d. example implementation
                -- as a historian, create a game aroud high school history
                -- ask me questions about high school history
                -- wait for my response
                -- if my response is correct, ask me another question
                -- if my response is incorrect, then provide me with the correct answer
                -- repeat until I get 10 questions correct

            e. Consequences
                -- This pattern can be combined effectively
                    with the Persona, Infinite Generation, and Visualization Generator patterns
                

    3. Infinite Generation Pattern
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal of this pattern is for the llm to generate series of outputs without the need 
                for the user to provide any input after the initial request
            -- The goal is to limit how much text the user must type to
                produce the next output, based on the assumption that the user
                does not want to continually reintroduce the prompt.
            -- It works well when user is allowed to maintain the root prompt
                and the LLM can generate a series of outputs based on the
                root prompt with little to no additional input from the user. 


        b. IG Pattern value (motivation)
            -- The task may require similar outputs to be generated
                repeatedly.

        c. structure and key ideas of the pattern
            -- I would like you to generate output forever, X output(s) at a time.
            -- (Optional) here is how to use the input I provide between outputs.
            -- (Optional) stop when I ask you to.

        d. example implementation
            -- “From now on, I want you to generate a name
                and job until I say stop. I am going to provide a
                template for your output. Everything in all caps is a
                placeholder. Any time that you generate text, try to
                fit it into one of the placeholders that I list. Please
                preserve the formatting and overall template that I
                provide: https://myapi.com/NAME/profile/JOB”

        e. Consequences
            -- In conversational LLMs, the input to
                the model at each time step is the previous output and the
                new user input. Although the details of what is preserved
                and reintroduced in the next output cycle are model and
                implementation dependent, they are often limited in scope. The
                model is therefore constantly being fed the previous outputs
                and the prompt, which can result in the model losing track of
                the original prompt instructions over time if they exceed the
                scope of what it is being provided as input.
            -- Risks
                -- The llm model may lose track of the original prompt instructions over time.
                -- This pattern may work really well with short user corrective feedback to the llm
                -- This pattern may generate repeated outputs

E. Prompt Improvement patterns
    1. Question Refinement pattern
        a. User Intent and description or full context of the problem (intent and context)
            -- In this pattern the user works with the llm to  suggest improvements to the prompt
                or suggest the user better way to ask a question
        
        b. QR Pattern value (motivation)
            -- motivation for using this pattern is to that the user may not know how to ask a question
               about a particular domain or may not know how to improve the prompt
            - in either case, the user can leverage llm to suggest improvements to the prompt

        c. structure and key ideas of the pattern
            -- Within scope X, suggest a better version of the question to use instead
            -- (Optional) prompt me if I would like to use the better version instead

        d. example implementation
            -- within the scope of BA interview, suggest a better version of the question to use instead
                of the one I asked 
            -- prompt me if I would like to use the better version instead
            -- Whenever I ask a question about how to write some
                code, suggest a better version of my question that
                asks how to write the code in a way that minimizes
                my dependencies on external libraries

            -- “From now on, whenever I ask a question, ask four
                additional questions that would help you produce a
                better version of my original question. Then, use my
                answers to suggest a better version of my original
                question.”

        e. Consequences
            -- Benefits
                -- This pattern helps bridge the gap between the user's knowledge and the llm's knowledge
                -- Combines well with Cognitive Verifier pattern
                -- Combines well with fact check list pattern
                -- Combines well with reflection pattern
            -- Risks
                -- The llm may lose focus or questions or the opposite where focusing on a limited context
 
    2. Alternative Approach Pattern
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal of this patter is to have the llm suggest alternative approaches of solving a problem
            -- To help the user think about the problems and solutions in a different way

        b. AA Pattern value (motivation)
            -- User may have preconceived notions about how to solve a problem, and it may be hinderence to
                solving the problem effectively and effectively.
            -- This pattern can help user think about alternative solutions to a problem

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- Within scope X, if there are alternative ways to accomplish the same thing, list the best alternate approaches
            -- (Optional) compare/contrast the pros and cons of each approach
            -- (Optional) include the original way that I asked
            -- (Optional) prompt me for which approach I would like to use

        d. example implementation
            -- “Whenever I ask you to deploy an application to
                a specific cloud service, if there are alternative
                services to accomplish the same thing with the
                same cloud service provider, list the best alternative
                services and then compare/contrast the pros and cons
                of each approach with respect to cost, availability,
                and maintenance effort and include the original way
                that I asked. Then ask me which approach I would
                like to proceed with.”

        e. Consequences
            -- Benefits
                -- This pattern is effective and can be widely used with other patterns and solving tasks
            -- Risks
          
    3. Cognitive Verifier
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal of this pattern is to break down the problem into smaller subproblems or question into smaller subquestions
               and have the llm resolve the subproblems or subquestions to provide the final answer to the user

        b. CV Pattern value (motivation)
            -- Research literature suggests that llms can reason better if a question is broke down
                into smaller subquestions. 
            -- Humans may ask high level questions at first, which can make it harder to answer the question
                effectively and efficiently.

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- When you are asked a question, follow these rules
            -- Generate a number of additional questions that would
                help more accurately answer the question         
            -- Combine the answers to the individual questions to
                produce the final answer to the overall question   

        d. example implementation
            -- “When I ask you a question, generate three additional questions that would help you give a more
                accurate answer. When I have answered the three
                questions, combine the answers to produce the final
                answers to my original question.”
            -- “When I ask you a question, generate three additional questions that would help you give a more
                accurate answer. Assume that I know little about
                the topic that we are discussing and please define
                any terms that are not general knowledge. When
                I have answered the three questions, combine the
                answers to produce the final answers to my original
                question.”

        e. Consequences
            -- Benefits
                -- Good practice is ask the llm to only generate n number of questions 
            -- Risks
                -- llm may miss out on n + 1 question that may be important
               
    4. Refusal Breaker
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal here is llm asking the user to rephrase a question when the llm is unable 
                to answer the question for some reason

        b. RB Pattern value (motivation)
            -- The llm may not be able to answer a question for a variety of reasons
                this pattern can help the user rephrase the question in a way that the llm can answer

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- Whenever you can’t answer a question 
            -- Explain why you can’t answer the question
            -- Provide one or more alternative wordings of the question that you could answer

        d. example implementation
            -- “Whenever you can’t answer a question, explain why
                and provide one or more alternate wordings of the
                question that you can’t answer so that I can improve
                my questions.”

        e. Consequences
            -- Benefits
                -- Allows the user to rephrase the question in a way that the llm can answer
            -- Risks 
                -- This pattern creates a method of possibily bypassing the llms public domain policy
                    the user can 'unarm' the llm
                -- This could lead to user getting answer to the harmful questions


 


F. Context Control
    1. Context Manager
        a. User Intent and description or full context of the problem (intent and context)
            --  The goal of this pattern is to allow the user to control the context of the conversation
                with the llm. The user can specify and/or remove the context of the conversation with the llm.
            -- Another goal here is to focus the coverstaion on specific topics and exlude unrelated topics

        b. CM Pattern value (motivation)
            -- User can control the statement to the llm to generate a response providing user the control over output
            -- As the conversation gets longer, the llm may start to drift away from the original topic
                this pattern can help the user to bring the llm back to the original topic

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- Within Scope X
            -- Please Consider y
            -- Please ignore z
            -- (Optional) Start over
             
            -- The more inclusive and exclusive above list is, the better the pattern will work

        d. example implementation
            -- “When analyzing the following pieces of code, only consider security aspects.”
            -- “When analyzing the following pieces of code, do not consider formatting or naming conventions.”
            -- “Ignore everything that we have discussed. Start over.”
        
        e. Consequences
            -- Risks
                -- The llm may wipe out patterns that the user is unaware of 
                -- The risk can be mitigated by asking llm to print out it's default patterns

G. Error Identification
    1. Fact Check List
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal here is that the llm outputs a list of facts that are present in the output
            -- To inform the user of the facts that the output is based on
            -- So the user is free to perform due diligence on the facts

        b. FCL Pattern value (motivation)
            -- The llm may provide convinsing outputs that are factually incorrect, 
                this pattern displays the facts that the output is based on
            -- Lifts the burden of search for the facts from the user

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- Whenever you output a statement
            -- List the facts that the statement is based on
            -- The set of facts should be inserted in a specific location in the output
            -- The set of facts shoul be fundamental facts that could undermine the veracity 
                of the output if any of them are incorrect.

        d. example implementation
            -- “From now on, when you generate an answer, create
                a set of facts that the answer depends on that should
                be fact-checked and list this set of facts at the
                end of your output. Only include facts related to
                cybersecurity.”

        e. Consequences
            -- Benefits
                -- The user can perform due diligence on the facts
                -- It's helpful when the user is not an expert in the domain

    2. Reflection
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal here is to have the llm automatically explain the rationale behind the output
        
        b. R Pattern value (motivation)
            -- Allows the user to asses the output validity by looking at the rationale behind the output
            -- llm may provide faulty output, this pattern can help the user to identify the faulty output
            -- It can also help debug the llm output

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- Whenever you generate an output
            -- Provide a rationale for the output
            -- Provide the assumptions behind the output
            -- (Optional) ... so that I can improve my questions

        d. example implementation
            -- ”When you provide an answer, please explain the
                reasoning and assumptions behind your selection
                of software frameworks. If possible, use specific
                examples or evidence with associated code samples
                to support your answer of why the framework is
                the best selection for the task. Moreover, please
                address any potential ambiguities or limitations in
                your answer, in order to provide a more complete
                and accurate response.”
        
        e. Consequences
            -- Benefits
                -- 
            -- Risks
                -- If the user is not domain expert, then they may not be able to identify the faulty output
                -- llm can make faulty ratonale and assumptions seem valid
                    -- combine it with fact check list pattern to mitigate this risk



H. System Prompting Patterns 
    1. Natural Language Prompting 
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal here is to create a system prompt using natural language

        b. NLP Pattern value (motivation)
            -- It allows the language model to solve a problem by following a set of instructions

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- System message can be written in natural language

        d. example implementation
            -- “I want you act as a Indian food expert, I will give you a list of ingredients and you will tell me what dish can be made from those ingredients”
                I want to return a list of dishes that can be made from a list of ingredients.
                make sure that the list of dishes is sorted by the number of ingredients required to make the dish"             

        e. Consequences
            -- Benefits
                -- It gives a framework to system to solve the problem.
            
            -- Risks
                -- The system message may vary from user to user, which would makes the output 
                quality less consistent and less predictable.
                -- natural language structured system message may be too long and complex for the llm to understand
                and it may produce less desirable output


    2. Behavior Driven Prompting
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal here is to create a system prompt using behavior driven approach
            -- Behavior driven combines natural language structure with BDP structure 
            -- BDP structure is inspired from the BDD framework
            -- Another goal here is to improve upon the natural language prompting pattern

        b. BDP Pattern value (motivation)
            -- It allows the language model to solve a problem by following a set of instructions
            -- It allows the user to specify the desired behavior of the llm
        
        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- Given
            -- When
            -- Then
            -- But
            -- And
            -- or 
            -- not
            -- else

        d. example implementation
            -- Given the user is asking you a question
            -- when you receive the question
            -- then analyze the question
            -- and identify the intent and problem context
            -- and generate an answer

        e. Consequences
            -- Benefits
                -- It gives a framework to system to solve the problem.
                -- It allows the user to mitigate the risks of natural language prompting pattern

            -- Risks
                -- The system message may vary from user to user, which would makes the output
                -- quality would still be affected by the user's ability to write a good BDP
                -- May not be able to capture full context of the problem when it comes to 
                    technical instructions

    3. Acceptance Criteria driven prompting
        a. User Intent and description or full context of the problem (intent and context)
            -- The goal here is to create a system prompt using Acceptance Criteria driven approach
            -- Acceptance Criteria driven patten combines natural language structure with ACDP
            -- ACDP structure is inspired from ATDD framework
            -- One goal here is to improve upon natural language prompt patterns
            -- Another goal here is to 

        b. ACDP Pattern value (motivation)
            -- It allows the language model to solve a problem by following a set of instructions
            -- It allows the user to specify the output acceptance criteria to the llm

        c. structure and key ideas of the pattern (fundamental contextual statements)
            -- Given
            -- When
            -- Then
            -- But
            -- And
            -- or 
            -- not
            -- else

        d. example implementation
            -- Given the system receives a user question
            -- When the question is processed by the analysis module
            -- Then The analysis module should identify the intent with an accuracy of at least 95%
            -- And The response generation module should produce an answer within 2 seconds
            -- And The generated answer must meet the predefined quality standards

        e. Consequences
            -- Benefits
                -- It gives a framework to system to solve the problem.
                -- It allows the user to mitigate the risks of natural language prompting pattern and BDP pattern
                
            -- Risks
                -- The system message may vary from user to user, which would makes the output
                -- quality would still be affected by the user's ability to write a good ACDP
                -- May be too difficult for the user to write a good ACDP due to constraints

    4. Integrated Prompting Pattern (IPP)
        a. User Intent and description or full context of the problem (intent and context)
            --The goal here is to create a system prompt using an integrated approach that combines BDP, ACDP, and natural language patterns.
            -- IPP seeks to leverage the strengths of Natural Language Prompting, Behavior Driven Prompting, and Acceptance Criteria Driven Prompting.
            -- It aims to provide a comprehensive solution that is adaptable to various user needs and contexts.
            -- One key goal is to enhance the effectiveness of system prompts by integrating different methodologies.
        
        b. IPP Pattern value (motivation)
            -- It allows the language model to solve a problem by combining behavioral insights, acceptance criteria, and natural language understanding.
            -- It provides a flexible framework that can adapt to different types of problems and user requirements.
            -- It seeks to improve the consistency and quality of system prompts by integrating proven prompting strategies.
        
        c. Structure and key ideas of the pattern (fundamental contextual statements)
            -- It's important to mention the patterns that are being leveraged here.
            -- Integration of NLP, BDP, and ACDP structures.
            -- Utilization of natural language patterns to enhance user interaction.
            -- Adaptation of elements from NLP, BDP, and ACDP as needed.
            -- Potential introduction of new statements or modifiers to suit specific use cases.
        
        d. Example implementation
            -- Scenario: Retrieving details of a historical event using Integrated Prompting Pattern
            -- Given the user wants information about the Battle of Gettysburg
            -- And the user expects a response within 5 seconds
            -- And the user specifies that the information must include key dates, leaders, and outcomes
            -- When the system receives the integrated prompt
            -- Then the system should analyze the event's name and user's criteria
            -- And the system must respond with accurate details about the Battle of Gettysburg
            -- And the response must include key dates, leaders, and outcomes
            -- And the response must be delivered within 5 seconds
        
        e. Consequences
            -- Benefits
                -- It provides a comprehensive framework to tackle complex problems.
                -- It allows the user to specify in NLP, behavior, and acceptance criteria, enhancing the precision of the system response.
                -- It leverages the strengths of existing patterns, potentially improving the reliability and robustness of system prompts.
        
            -- Risks
                -- The complexity of integrating different patterns may increase the learning curve for users.
                -- Balancing the elements of BDP, ACDP, and natural language may require careful consideration and design.
                -- Ensuring the seamless integration of different methodologies may pose challenges in implementation.

    5. Key-Value Prompt Pattern (KVP)
        a. User Intent and Description or Full Context of the Problem (Intent and Context)
            -- Goal: To create a prompt using key-value pairs that structure and guide the interaction within the prompt.
            -- Context: Organizing information, providing context, and guiding user's actions or understanding through labeled identifiers (keys) and associated details (values).
            -- Integration: Can be used in combination with other high-level patterns like Natural Language Prompt, Behavior Driven Prompt, etc., or within the Integrated Prompt Pattern.
      
        b. KVP Pattern Value (Motivation)
            -- Clarity: Enhances the clarity and comprehension of the prompt by organizing information.
            -- Flexibility: Allows for customization and adaptation to fit various scenarios and use cases.
            -- Integration: Can be a foundational structural design choice in both System and User Prompts.
      
        c. Structure and Key Ideas of the Pattern (Fundamental Contextual Statements)
            -- Keywords (Keys): Labels or identifiers that categorize and organize information.
            -- Values: Specific details, instructions, or content associated with each keyword.
            -- Customization: Both keywords and values can be tailored to fit the specific context, goals, and requirements of the prompt.
       
        d. Example Implementation
            -- Scenario: Creating a step-by-step guide for software development using Key-Value Prompt Pattern
            -- Keyword: "Step 1"; Value: "Analyze the requirements and identify the main objectives."
            -- Keyword: "Step 2"; Value: "Design the architecture and select appropriate technologies."
            -- Keyword: "Principal"; Value: "Follow the SOLID principles in coding."
        e. Consequences
            -- Benefits
                -- Provides a clear and organized structure for the prompt.
                -- Enhances the user's understanding and navigation through the prompt.
                -- Offers flexibility in adapting to various contexts and needs.
            Risks
                -- Overuse or misuse of keywords may lead to confusion or complexity.
                -- Balancing the use of key-value pairs with other design elements may require careful consideration and planning.
       


I. User Prompt Patterns 
    Same as the system prompt patterns, but for the user prompts 
        


 

            






